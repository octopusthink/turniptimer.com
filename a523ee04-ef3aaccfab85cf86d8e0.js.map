{"version":3,"file":"a523ee04-ef3aaccfab85cf86d8e0.js","mappings":"0zBAyNA,IAlNc,SAACA,GACb,IAAMC,GAAQC,EAAAA,EAAAA,YAEZC,EAcEH,EAdFG,SACAC,EAaEJ,EAbFI,WACAC,EAYEL,EAZFK,iBACAC,EAWEN,EAXFM,iBACAC,EAUEP,EAVFO,SACAC,EASER,EATFQ,UACAC,EAQET,EARFS,KACAC,EAOEV,EAPFU,UACAC,EAMEX,EANFW,UACAC,EAKEZ,EALFY,WACAC,EAIEb,EAJFa,WACAC,EAGEd,EAHFc,YACAC,EAEEf,EAFFe,SACAC,EACEhB,EADFgB,gBAGEC,GAAU,GACVL,GAAcC,GAAcC,GAAeC,KAC7CE,GAAU,GAGZ,IAAMC,EAAkBT,EAAOR,EAAMkB,OAAOC,QAAQC,MAAQ,cAE5D,OACE,oBACEb,UAAWA,EACXc,KAAKA,EAAAA,EAAAA,KAAF,cACaJ,EADb,qFAOEf,GAAD,EAPD,IAYCA,GAAQ,EAZT,IAoBCa,GAAe,EApBhB,SA2BFZ,IACC,SAAC,IAAD,CACEkB,KAAKA,EAAAA,EAAAA,KAAF,4CAICnB,GAAQ,EAJT,IAQCQ,GAAS,EARV,QAaHY,IAAKnB,EACLoB,MAAM,OACNC,IAAI,KAGPpB,IACC,gBACEiB,IAAG,EAKHI,QAAQ,OACRH,IAAKlB,EACLoB,IAAI,MAGR,gBACEH,KAAKA,EAAAA,EAAAA,MACAlB,GAAcC,IAAf,EADD,oEAYeJ,EAAM0B,KAAKC,cAZ1B,kBAagB3B,EAAM0B,KAAKC,cAb3B,gEAiBgB3B,EAAM0B,KAAKE,eAjB3B,mBAkBmB5B,EAAM0B,KAAKE,eAlB9B,iBAmBiB5B,EAAM0B,KAAKG,cAnB5B,kBAoBkB7B,EAAM0B,KAAKG,cApB7B,4CAwBI3B,IACDmB,EAAAA,EAAAA,KADA,aAEerB,EAAM0B,KAAKI,aAF1B,QAxBH,iBA4BiB9B,EAAM0B,KAAKE,eA5B5B,kBA6BkB5B,EAAM0B,KAAKE,eA7B7B,KAgCC1B,GAAQ,EAhCT,UAsCH,gBACEmB,KAAKA,EAAAA,EAAAA,KAAF,sBAGEZ,IACDY,EAAAA,EAAAA,KADA,yBAGerB,EAAM0B,KAAKI,aAH1B,QAHD,KASEd,IACAP,IACDY,EAAAA,EAAAA,KAFA,yBAIerB,EAAM0B,KAAKK,gBAJ1B,QATD,8DAkBa/B,EAAM0B,KAAKC,cAlBxB,gBAqBGhB,IACAU,EAAAA,EAAAA,KADU,sCAGiBV,EAHjB,uCArBb,mDA+BaX,EAAM0B,KAAKG,cA/BxB,IAgCGjB,IACAS,EAAAA,EAAAA,KADU,sCAGiBT,EAHjB,uCAhCb,oDA0CaZ,EAAM0B,KAAKE,eA1CxB,IA2CGf,IACAQ,EAAAA,EAAAA,KADW,sCAGgBR,EAHhB,uCA3Cd,2CAqDGC,IACAO,EAAAA,EAAAA,KADQ,sCAGmBP,EAHnB,uCArDX,UA+DFT,IACC,SAAC,IAAD,CACEE,UAAU,SACVc,IAAG,IASNf","sources":["webpack://@octopusthink/turniptimer.com/./src/components/Panel/index.js"],"sourcesContent":["import { useTheme } from '@octopusthink/nautilus';\nimport React from 'react';\nimport { css } from '@emotion/react';\n\nimport Image from 'components/Image';\nimport Circle from 'static/images/circle.svg';\n\nconst Panel = (props) => {\n  const theme = useTheme();\n  const {\n    argument,\n    background,\n    backgroundStatic,\n    circleBackground,\n    children,\n    className,\n    dark,\n    fullwidth,\n    greyscale,\n    gridMobile,\n    gridTablet,\n    gridDesktop,\n    gridWide,\n    negativeMargins,\n  } = props;\n\n  let hasGrid = false;\n  if (gridMobile || gridTablet || gridDesktop || gridWide) {\n    hasGrid = true;\n  }\n\n  const panelBackground = dark ? theme.colors.neutral.black : 'transparent';\n\n  return (\n    <section\n      className={className}\n      css={css`\n        background: ${panelBackground};\n        justify-content: flex-start;\n        display: flex;\n        flex-direction: column;\n        position: relative;\n\n        ${!argument &&\n          css`\n            overflow-x: hidden;\n          `}\n\n        ${argument &&\n          css`\n            overflow-x: visible;\n            margin-top: 16rem;\n            margin-bottom: 16rem;\n            position: relative;\n          `}\n\n        ${negativeMargins &&\n          css`\n            margin-top: -16rem;\n            margin-bottom: -24rem;\n          `}\n      `}\n    >\n      {background && (\n        <Image\n          css={css`\n            object-fit: cover;\n            width: 100%;\n            height: 100vh;\n            ${argument &&\n              css`\n                height: 60vh;\n              `}\n            ${greyscale &&\n              css`\n                filter: grayscale(100%) contrast(80%) brightness(95%);\n              `}\n          `}\n          src={background}\n          width=\"100%\"\n          alt=\"\"\n        />\n      )}\n      {backgroundStatic && (\n        <img\n          css={css`\n            object-fit: cover;\n            width: 100%;\n            height: 100vh;\n          `}\n          loading=\"lazy\"\n          src={backgroundStatic}\n          alt=\"\"\n        />\n      )}\n      <div\n        css={css`\n          ${(background || backgroundStatic) &&\n            css`\n              position: absolute;\n              top: 0;\n              left: 0;\n              right: 0;\n              bottom: 0;\n            `}\n          margin: 0 auto;\n          padding-top: 4rem;\n          padding-bottom: 4rem;\n          padding-left: ${theme.site.mobilePadding};\n          padding-right: ${theme.site.mobilePadding};\n          width: 100%;\n\n          @media screen and (min-width: 780px) {\n            padding-top: ${theme.site.desktopPadding};\n            padding-bottom: ${theme.site.desktopPadding};\n            padding-left: ${theme.site.tabletPadding};\n            padding-right: ${theme.site.tabletPadding};\n          }\n\n          @media screen and (min-width: 1024px) {\n            ${!argument &&\n              css`\n                max-width: ${theme.site.maxSiteWidth};\n              `}\n            padding-left: ${theme.site.desktopPadding};\n            padding-right: ${theme.site.desktopPadding};\n          }\n\n          ${argument &&\n            css`\n              max-width: 112rem;\n            `}\n        `}\n      >\n        <div\n          css={css`\n            position: relative;\n\n            ${!fullwidth &&\n              css`\n                margin: auto;\n                max-width: ${theme.site.maxSiteWidth};\n              `}\n\n            ${!hasGrid &&\n              !fullwidth &&\n              css`\n                margin: auto;\n                max-width: ${theme.site.maxContentWidth};\n              `}\n\n            @media screen and (max-width: 779px) {\n              display: grid;\n              grid-gap: ${theme.site.mobilePadding};\n              height: 100%;\n\n              ${gridMobile &&\n                css`\n                  display: grid;\n                  grid-template-columns: ${gridMobile};\n                  align-items: center;\n                  height: 100%;\n                `}\n            }\n\n            @media screen and (min-width: 780px) {\n              grid-gap: ${theme.site.tabletPadding};\n              ${gridTablet &&\n                css`\n                  display: grid;\n                  grid-template-columns: ${gridTablet};\n                  align-items: center;\n                  height: 100%;\n                `}\n            }\n\n            @media screen and (min-width: 1024px) {\n              grid-gap: ${theme.site.desktopPadding};\n              ${gridDesktop &&\n                css`\n                  display: grid;\n                  grid-template-columns: ${gridDesktop};\n                  align-items: center;\n                  height: 100%;\n                `}\n            }\n\n            @media screen and (min-width: 1400px) {\n              ${gridWide &&\n                css`\n                  display: grid;\n                  grid-template-columns: ${gridWide};\n                  align-items: center;\n                  height: 100%;\n                `}\n            }\n          `}\n        >\n          {circleBackground && (\n            <Circle\n              className=\"circle\"\n              css={css`\n                position: absolute;\n                z-index: -1;\n                width: 28rem;\n                height: auto;\n                opacity: 0.5;\n              `}\n            />\n          )}\n          {children}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Panel;\n"],"names":["props","theme","useTheme","argument","background","backgroundStatic","circleBackground","children","className","dark","fullwidth","greyscale","gridMobile","gridTablet","gridDesktop","gridWide","negativeMargins","hasGrid","panelBackground","colors","neutral","black","css","src","width","alt","loading","site","mobilePadding","desktopPadding","tabletPadding","maxSiteWidth","maxContentWidth"],"sourceRoot":""}