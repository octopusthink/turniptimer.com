{"version":3,"sources":["webpack:///./src/components/AuthorByline/index.js","webpack:///./src/components/PageFooter/index.js","webpack:///./src/components/SequentialLink/index.js","webpack:///./src/templates/Blog/Post.js"],"names":["AuthorByline","props","alt","avatar","children","name","src","label","Tag","level","css","small","PageFooter","SequentialLink","arrowIcon","direction","title","to","background","color","medium","BlogPost","theme","useTheme","data","pageContext","post","body","fields","authors","date","metaDescription","slug","summary","tags","updated","formattedDate","dayjs","format","config","dateFormat","formattedUpdated","formattedMetadata","colors","neutral","grey600","length","metadata","map","tag","id","text","inverseDark","description","App","SEO","PageWrapper","key","PageHeader","pageTitle","PageBody","author","bio","prevslug","prevtitle","nextslug","nexttitle","pageQuery"],"mappings":"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","file":"component---src-templates-blog-post-js-9c255b9f01c8cb4bf938.js","sourcesContent":["import { Heading, Paragraph, Tags } from '@octopusthink/nautilus';\nimport React from 'react';\nimport { css } from '@emotion/core';\n\nconst AuthorByline = (props) => {\n  const { alt, avatar, children, name } = props;\n\n  return (\n    <div>\n      <img src={avatar} alt={alt} />\n\n      <div>\n        <Tags label=\"Job title\">\n          <Tags.Tag>Written by</Tags.Tag>\n        </Tags>\n        <Heading\n          level={2}\n          css={css`\n            margin-bottom: 0;\n          `}\n        >\n          {name}\n        </Heading>\n      </div>\n\n      <Paragraph\n        small\n        css={css`\n          margin-bottom: 0;\n        `}\n      >\n        {children}\n      </Paragraph>\n    </div>\n  );\n};\n\nexport default AuthorByline;\n","import React from 'react';\n\nconst PageFooter = (props) => {\n  const { children } = props;\n\n  return <footer>{children}</footer>;\n};\n\nexport default PageFooter;\n","import { Heading, Icon, Link, Tags } from '@octopusthink/nautilus';\nimport React from 'react';\nimport { css } from '@emotion/core';\n\nconst SequentialLink = (props) => {\n  const { direction, title, to } = props;\n  let arrowIcon;\n  if (direction === 'next') {\n    arrowIcon = 'arrow-right';\n  }\n  if (direction === 'previous') {\n    arrowIcon = 'arrow-left';\n  }\n\n  return (\n    <Link\n      to={to}\n      css={css`\n        border: 0;\n        display: flex;\n        align-items: center;\n        justify-content: end;\n        grid-gap: 0.8rem;\n\n        ${direction === 'previous' &&\n          css`\n            text-align: left;\n            flex-direction: row-reverse;\n            justify-content: start;\n          `}\n\n        ${direction === 'next' &&\n          css`\n            text-align: right;\n            flex-direction: row;\n            justify-content: end;\n          `}\n      `}\n    >\n      <div>\n        <Tags>\n          <Tags.Tag>{direction} post</Tags.Tag>\n        </Tags>\n        <Heading\n          level={3}\n          css={css`\n            margin-bottom: 0;\n          `}\n        >\n          {title}\n        </Heading>\n      </div>\n      <Icon\n        name={arrowIcon}\n        background=\"black\"\n        color=\"white\"\n        medium\n        css={css`\n          @media screen and (max-width: 480px) {\n            display: none;\n          }\n        `}\n      />\n    </Link>\n  );\n};\n\nexport default SequentialLink;\n","import { Link, Tags, metadata, useTheme } from '@octopusthink/nautilus';\nimport { graphql } from 'gatsby';\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\nimport React, { Fragment } from 'react';\nimport { css } from '@emotion/core';\nimport dayjs from 'dayjs';\n\nimport AuthorByline from 'components/AuthorByline';\nimport PageBody from 'components/PageBody';\nimport PageFooter from 'components/PageFooter';\nimport PageHeader from 'components/PageHeader';\nimport PageWrapper from 'components/PageWrapper';\nimport SequentialLink from 'components/SequentialLink';\nimport SEO from 'components/SEO';\nimport config from 'data/SiteConfig';\nimport App from 'templates/App';\n\nexport const BlogPost = (props) => {\n  const theme = useTheme();\n\n  const { data, pageContext } = props;\n  const { post } = data;\n\n  const { body } = post;\n  const { authors, date, metaDescription, slug, summary, tags, title, updated } = post.fields;\n\n  const formattedDate = dayjs(date).format(config.dateFormat);\n  const formattedUpdated = updated && dayjs(updated).format(config.dateFormat);\n\n  const formattedMetadata = (\n    <div\n      css={css`\n        align-items: center;\n        display: flex;\n        white-space: nowrap;\n      `}\n    >\n      <Tags label=\"Published on\">\n        <Tags.Tag title={formattedUpdated && `Updated ${formattedUpdated}`}>\n          <span\n            css={css`\n              color: ${theme.colors.neutral.grey600};\n            `}\n          >\n            {formattedDate}\n          </span>\n        </Tags.Tag>\n      </Tags>\n\n      {tags.length && (\n        <Fragment>\n          <span\n            css={css`\n              ${metadata.small(theme)};\n              color: ${theme.colors.neutral.grey600};\n              padding: 0 0.4rem 0.4rem 0;\n            `}\n          >\n            &middot;\n          </span>\n\n          <Tags label=\"Tags\">\n            {tags.map((tag) => {\n              return (\n                <Tags.Tag>\n                  <Link\n                    to={`/blog/tags/${tag.id}`}\n                    css={css`\n                      border: none;\n                      color: ${theme.colors.neutral.grey600};\n\n                      &:hover {\n                        color: ${theme.colors.text.inverseDark};\n                      }\n                    `}\n                  >\n                    #{tag.name}\n                  </Link>\n                </Tags.Tag>\n              );\n            })}\n          </Tags>\n        </Fragment>\n      )}\n    </div>\n  );\n  const description = metaDescription || summary;\n\n  return (\n    <App>\n      <SEO title={title} description={description} />\n      <PageWrapper>\n        <Fragment key={slug}>\n          <PageHeader metadata={formattedMetadata} pageTitle={title} summary={summary} />\n        </Fragment>\n        <PageBody>\n          <MDXRenderer>{body}</MDXRenderer>\n          {authors.map((author) => (\n            <AuthorByline\n              name={author.name}\n              alt={author.alt}\n              avatar={author.avatar}\n              title={author.title}\n            >\n              {author.bio}\n            </AuthorByline>\n          ))}\n        </PageBody>\n\n        <PageFooter>\n          {pageContext.prevslug !== slug && (\n            <SequentialLink\n              direction=\"previous\"\n              title={pageContext.prevtitle}\n              to={pageContext.prevslug}\n            />\n          )}\n\n          {pageContext.nextslug !== slug && (\n            <SequentialLink\n              direction=\"next\"\n              title={pageContext.nexttitle}\n              to={pageContext.nextslug}\n            />\n          )}\n        </PageFooter>\n      </PageWrapper>\n    </App>\n  );\n};\n\nexport const pageQuery = graphql`\n  query($id: String!, $nowTimestamp: Int!) {\n    post: mdx(id: { eq: $id }, fields: { timestamp: { lte: $nowTimestamp } }) {\n      fields {\n        authors {\n          alt\n          avatar\n          bio\n          id\n          name\n          title\n        }\n        date\n        metaDescription\n        slug\n        summary\n        title\n        tags {\n          id\n          name\n          summary\n        }\n        updated\n      }\n      body\n      id\n    }\n  }\n`;\n\nexport default BlogPost;\n"],"sourceRoot":""}