{"version":3,"sources":["webpack:///./src/components/PostCard/index.js","webpack:///./src/templates/Blog/index.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.array.fill.js"],"names":["PostCard","props","theme","useTheme","date","readingTime","slug","summary","title","formattedDate","dayjs","format","config","dateFormat","css","label","Tag","metadata","small","colors","neutral","grey800","tabIndex","to","level","state","hoverText","navigation","minimal","BlogList","data","pageContext","posts","numberOfPages","currentPage","pageTitle","blogTitle","pageSummary","blogSummary","description","blogDescription","App","SEO","PageWrapper","PageHeader","PageBody","edges","map","node","fields","timeToRead","key","Array","fill","item","i","index","link","Item","pageQuery","$export","P"],"mappings":"6aA6FeA,EA7EE,SAACC,GAChB,IAAMC,EAAQC,qBACNC,EAA4CH,EAA5CG,KAAMC,EAAsCJ,EAAtCI,YAAaC,EAAyBL,EAAzBK,KAAMC,EAAmBN,EAAnBM,QAASC,EAAUP,EAAVO,MACpCC,EAAgBC,IAAMN,GAAMO,OAAOC,IAAOC,YAEhD,OACE,yBACEC,IAAG,GAIH,4BACE,qBACEA,IAAG,GAIH,cAAC,OAAD,CAAMC,MAAM,kBACV,cAAC,OAAKC,IAAN,KAAWP,IAGb,sBACEK,IAAKA,cACDG,WAASC,MAAMhB,GADhB,UAEQA,EAAMiB,OAAOC,QAAQC,QAF7B,gCADL,KAUA,cAAC,OAAD,CAAMN,MAAM,gBACV,cAAC,OAAKC,IAAN,KACGX,EADH,OACmB,cAAC,iBAAD,YADnB,WAKJ,cAAC,OAAD,CAAMiB,SAAS,KAAKC,GAAIjB,GACtB,cAAC,UAAD,CACEQ,IAAG,EAGHU,MAAO,GAENhB,KAIP,cAAC,YAAD,CACEM,IAAG,GAIFP,GAEH,4BACE,cAAC,SAAD,CACEgB,GAAIjB,EACJQ,IAAKA,cAAF,wDAMUZ,EAAMiB,OAAOM,MAAMC,UAN7B,MASHC,YAAU,EACVC,SAAO,GAZT,mBAckB,cAAC,iBAAD,SAAkBpB,O,2GC1ErC,IAAMqB,EAAW,SAAC5B,GAAW,IAC1B6B,EAAsB7B,EAAtB6B,KAAMC,EAAgB9B,EAAhB8B,YACNC,EAAUF,EAAVE,MACAC,EAA+BF,EAA/BE,cAAeC,EAAgBH,EAAhBG,YACjBC,EAAYvB,IAAOwB,UACnBC,EAAczB,IAAO0B,YACrBC,EAAc3B,IAAO4B,gBAE3B,OACE,cAACC,EAAA,EAAD,KACE,cAACC,EAAA,EAAD,CAAKlC,MAAO2B,EAAWI,YAAaA,IACpC,cAACI,EAAA,EAAD,KACE,cAACC,EAAA,EAAD,CAAYT,UAAWA,EAAW5B,QAAS8B,IAC3C,cAACQ,EAAA,EAAD,KACGb,EAAMc,MAAMC,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACVC,EAAoCD,EAApCC,OAAoB5C,EAAgB2C,EAA5BE,WACR9C,EAA+B6C,EAA/B7C,KAAME,EAAyB2C,EAAzB3C,KAAMC,EAAmB0C,EAAnB1C,QAASC,EAAUyC,EAAVzC,MAC7B,OACE,cAAC,WAAD,CAAU2C,IAAK7C,GACb,cAAC,EAAD,CACEF,KAAMA,EACNC,YAAaA,EACbC,KAAMA,EACNC,QAASA,EACTC,MAAOA,QAMdyB,EAAgB,GACf,cAAC,OAAD,KACGmB,MAAMnB,GACJoB,KAAK,MACLN,KAAI,SAACO,EAAMC,GACV,IAAMC,EAAQD,EAAI,EACZE,EAAiB,IAAVD,EAAc,QAAd,cAAsCA,EAEnD,OACE,cAAC,OAAKE,KAAN,CAAWP,IAAKM,GACbvB,IAAgBsB,EACf,0BAAOA,GAEP,cAAC,OAAD,CAAMjC,GAAIkC,GAAOD,YAa5BG,EAAS,aA8BP9B,a,qBCjGf,IAAI+B,EAAU,EAAQ,QAEtBA,EAAQA,EAAQC,EAAG,QAAS,CAAER,KAAM,EAAQ,UAE5C,EAAQ,OAAR,CAAiC","file":"component---src-templates-blog-index-js-498a72e08df2a5f24013.js","sourcesContent":["import {\n  Button,\n  Link,\n  Heading,\n  Paragraph,\n  Tags,\n  VisuallyHidden,\n  metadata,\n  useTheme,\n} from '@octopusthink/nautilus';\nimport React from 'react';\nimport { css } from '@emotion/core';\nimport dayjs from 'dayjs';\n\nimport config from 'data/SiteConfig';\n\nconst PostCard = (props) => {\n  const theme = useTheme();\n  const { date, readingTime, slug, summary, title } = props;\n  const formattedDate = dayjs(date).format(config.dateFormat);\n\n  return (\n    <article\n      css={css`\n        margin-bottom: 6.4rem;\n      `}\n    >\n      <header>\n        <div\n          css={css`\n            margin-bottom: 0.4rem;\n          `}\n        >\n          <Tags label=\"Date Published\">\n            <Tags.Tag>{formattedDate}</Tags.Tag>\n          </Tags>\n\n          <span\n            css={css`\n              ${metadata.small(theme)};\n              color: ${theme.colors.neutral.grey800};\n              padding: 0 0.4rem 0.4rem 0;\n            `}\n          >\n            &middot;\n          </span>\n\n          <Tags label=\"Reading time\">\n            <Tags.Tag>\n              {readingTime} min<VisuallyHidden>ute</VisuallyHidden> read\n            </Tags.Tag>\n          </Tags>\n        </div>\n        <Link tabIndex=\"-1\" to={slug}>\n          <Heading\n            css={css`\n              margin-bottom: 1.6rem;\n            `}\n            level={2}\n          >\n            {title}\n          </Heading>\n        </Link>\n      </header>\n      <Paragraph\n        css={css`\n          margin-bottom: 0;\n        `}\n      >\n        {summary}\n      </Paragraph>\n      <footer>\n        <Button\n          to={slug}\n          css={css`\n            border: 0;\n            margin-left: 0;\n\n            &:hover {\n              box-shadow: none;\n              color: ${theme.colors.state.hoverText};\n            }\n          `}\n          navigation\n          minimal\n        >\n          Continue reading<VisuallyHidden> {title}</VisuallyHidden>\n        </Button>\n      </footer>\n    </article>\n  );\n};\n\nexport default PostCard;\n","import { Link, List } from '@octopusthink/nautilus';\nimport { graphql } from 'gatsby';\nimport React, { Fragment } from 'react';\n\nimport PageBody from 'components/PageBody';\nimport PageHeader from 'components/PageHeader';\nimport PageWrapper from 'components/PageWrapper';\nimport PostCard from 'components/PostCard';\nimport SEO from 'components/SEO';\nimport config from 'data/SiteConfig';\nimport App from 'templates/App';\n\nexport const BlogList = (props) => {\n  const { data, pageContext } = props;\n  const { posts } = data;\n  const { numberOfPages, currentPage } = pageContext;\n  const pageTitle = config.blogTitle;\n  const pageSummary = config.blogSummary;\n  const description = config.blogDescription;\n\n  return (\n    <App>\n      <SEO title={pageTitle} description={description} />\n      <PageWrapper>\n        <PageHeader pageTitle={pageTitle} summary={pageSummary} />\n        <PageBody>\n          {posts.edges.map(({ node }) => {\n            const { fields, timeToRead: readingTime } = node;\n            const { date, slug, summary, title } = fields;\n            return (\n              <Fragment key={slug}>\n                <PostCard\n                  date={date}\n                  readingTime={readingTime}\n                  slug={slug}\n                  summary={summary}\n                  title={title}\n                />\n              </Fragment>\n            );\n          })}\n\n          {numberOfPages > 1 && (\n            <List>\n              {Array(numberOfPages)\n                .fill(null)\n                .map((item, i) => {\n                  const index = i + 1;\n                  const link = index === 1 ? '/blog' : `/blog/page=${index}`;\n\n                  return (\n                    <List.Item key={link}>\n                      {currentPage === index ? (\n                        <span>{index}</span>\n                      ) : (\n                        <Link to={link}>{index}</Link>\n                      )}\n                    </List.Item>\n                  );\n                })}\n            </List>\n          )}\n        </PageBody>\n      </PageWrapper>\n    </App>\n  );\n};\n\nexport const pageQuery = graphql`\n  query blogPostsList($skip: Int!, $limit: Int!, $nowTimestamp: Int!) {\n    posts: allMdx(\n      sort: { fields: [fields___date], order: DESC }\n      filter: {\n        fileAbsolutePath: { regex: \"//content/blog/\" }\n        fields: { timestamp: { lte: $nowTimestamp } }\n      }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            date\n            slug\n            summary\n            title\n            tags {\n              name\n              summary\n            }\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`;\n\nexport default BlogList;\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n"],"sourceRoot":""}